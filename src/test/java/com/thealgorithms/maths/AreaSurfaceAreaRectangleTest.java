
// ********RoostGPT********
/*
Test generated by RoostGPT for test roost_test using AI Type  and AI Model

ROOST_METHOD_HASH=surfaceAreaRectangle_2410f53623
ROOST_METHOD_SIG_HASH=surfaceAreaRectangle_f7258b0ef7

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/roost_test/1731478178/source/JavaAlgorithms/src/test/java/com/thealgorithms/maths/AreaTest.java
Tests:
    "@Test
@Test
void testSurfaceAreaRectangle() {
    assertEquals(200.0, Area.surfaceAreaRectangle(10, 20));
}
"
    "@Test
@Test
void testAllIllegalInput() {
    assertAll(() -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCube(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaSphere(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaRectangle(0, 10)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaRectangle(10, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCylinder(0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCylinder(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaSquare(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTriangle(0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTriangle(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaParallelogram(0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaParallelogram(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(0, 1, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(1, 0, 1)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaTrapezium(1, 1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCircle(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaHemisphere(0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCone(1, 0)), () -> assertThrows(IllegalArgumentException.class, () -> Area.surfaceAreaCone(0, 1)));
}
""""
Scenario 1: Test when both length and width are positive

Details:
  TestName: testPositiveLengthAndWidth
  Description: This test is meant to check if the method correctly calculates the surface area when both length and width are positive.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with positive values for length and width.
  Assert: The result should be the product of the length and the width.

Validation:
  The assertion verifies that the method correctly calculates the surface area of a rectangle when both parameters are positive. This is significant as it is the standard use case for this method.

Scenario 2: Test when length is negative

Details:
  TestName: testNegativeLength
  Description: This test is meant to check if the method throws an IllegalArgumentException when the length is negative.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with a negative value for length and a positive value for width.
  Assert: An IllegalArgumentException should be thrown.

Validation:
  The assertion verifies that the method correctly handles a negative length, which is an invalid input. This is significant for ensuring input validation.

Scenario 3: Test when width is negative

Details:
  TestName: testNegativeWidth
  Description: This test is meant to check if the method throws an IllegalArgumentException when the width is negative.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with a positive value for length and a negative value for width.
  Assert: An IllegalArgumentException should be thrown.

Validation:
  The assertion verifies that the method correctly handles a negative width, which is an invalid input. This is significant for ensuring input validation.

Scenario 4: Test when both length and width are zero

Details:
  TestName: testZeroLengthAndWidth
  Description: This test is meant to check if the method throws an IllegalArgumentException when both length and width are zero.

Execution:
  Arrange: No arrangement is necessary for this test.
  Act: Invoke surfaceAreaRectangle with zero values for both length and width.
  Assert: An IllegalArgumentException should be thrown.

Validation:
  The assertion verifies that the method correctly handles zero values for both length and width, which are invalid inputs. This is significant for ensuring input validation.
"""
*/

// ********RoostGPT********

package com.thealgorithms.maths;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.*;

public class AreaSurfaceAreaRectangleTest {

	@Test
	@Tag("valid")
	public void testPositiveLengthAndWidth() {
		double length = 5.0;
		double width = 4.0;
		double result = Area.surfaceAreaRectangle(length, width);
		assertEquals(20.0, result, "The surface area should be 20.0");
	}

	@Test
	@Tag("invalid")
	public void testNegativeLength() {
		double length = -5.0;
		double width = 4.0;
		assertThrows(IllegalArgumentException.class, () -> {
			Area.surfaceAreaRectangle(length, width);
		}, "Must be a positive length");
	}

	@Test
	@Tag("invalid")
	public void testNegativeWidth() {
		double length = 5.0;
		double width = -4.0;
		assertThrows(IllegalArgumentException.class, () -> {
			Area.surfaceAreaRectangle(length, width);
		}, "Must be a positive width");
	}

	@Test
	@Tag("boundary")
	public void testZeroLengthAndWidth() {
		double length = 0.0;
		double width = 0.0;
		assertThrows(IllegalArgumentException.class, () -> {
			Area.surfaceAreaRectangle(length, width);
		}, "Both length and width should be greater than zero");
	}

}